name: Build and Release ClipForge

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get version
        id: get-version
        working-directory: ./clipforge
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        env:
          VERSION: ${{ steps.get-version.outputs.version }}
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.VERSION}`,
              name: `ClipForge v${process.env.VERSION}`,
              body: 'Download the appropriate installer for your platform below.\n\n**macOS**: Download the `.dmg` file\n**Windows**: Download the `.msi` file',
              draft: true,
              prerelease: false
            })
            return data.id

  build-macos:
    needs: create-release
    permissions:
      contents: write
    runs-on: macos-latest
    strategy:
      matrix:
        target: [aarch64-apple-darwin, x86_64-apple-darwin]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./clipforge/src-tauri -> target"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        working-directory: ./clipforge
        run: pnpm install

      - name: Download FFmpeg for macOS
        working-directory: ./clipforge/src-tauri/binaries
        run: |
          echo "Downloading FFmpeg for ${{ matrix.target }}..."

          # Download FFmpeg and FFprobe
          curl -L https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip -o ffmpeg.zip
          curl -L https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip -o ffprobe.zip

          # Extract
          unzip -o ffmpeg.zip
          unzip -o ffprobe.zip

          # Rename to target-specific names
          mv ffmpeg ffmpeg-${{ matrix.target }}
          mv ffprobe ffprobe-${{ matrix.target }}

          # Make executable
          chmod +x ffmpeg-${{ matrix.target }}
          chmod +x ffprobe-${{ matrix.target }}

          # Verify
          ./ffmpeg-${{ matrix.target }} -version
          ./ffprobe-${{ matrix.target }} -version

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: ./clipforge
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target ${{ matrix.target }}

  build-windows:
    needs: create-release
    permissions:
      contents: write
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./clipforge/src-tauri -> target"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        working-directory: ./clipforge
        run: pnpm install

      - name: Download FFmpeg for Windows
        working-directory: ./clipforge/src-tauri/binaries
        shell: pwsh
        run: |
          Write-Host "Downloading FFmpeg for Windows..."

          # Download FFmpeg
          Invoke-WebRequest -Uri "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -OutFile "ffmpeg.zip"

          # Extract
          Expand-Archive -Path ffmpeg.zip -DestinationPath . -Force

          # Find the extracted directory
          $ffmpegDir = Get-ChildItem -Directory -Filter "ffmpeg-*" | Select-Object -First 1

          # Copy binaries with correct names
          Copy-Item "$($ffmpegDir.FullName)/bin/ffmpeg.exe" "ffmpeg-x86_64-pc-windows-msvc.exe"
          Copy-Item "$($ffmpegDir.FullName)/bin/ffprobe.exe" "ffprobe-x86_64-pc-windows-msvc.exe"

          # Verify
          ./ffmpeg-x86_64-pc-windows-msvc.exe -version
          ./ffprobe-x86_64-pc-windows-msvc.exe -version

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: ./clipforge
          releaseId: ${{ needs.create-release.outputs.release_id }}

  build-linux:
    needs: create-release
    permissions:
      contents: write
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./clipforge/src-tauri -> target"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        working-directory: ./clipforge
        run: pnpm install

      - name: Download FFmpeg for Linux
        working-directory: ./clipforge/src-tauri/binaries
        run: |
          echo "Downloading FFmpeg for Linux..."

          # Download static FFmpeg build
          wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz

          # Extract
          tar -xf ffmpeg-release-amd64-static.tar.xz

          # Find the extracted directory
          ffmpeg_dir=$(find . -maxdepth 1 -type d -name "ffmpeg-*-amd64-static" | head -n 1)

          # Copy with correct names
          cp "$ffmpeg_dir/ffmpeg" ffmpeg-x86_64-unknown-linux-gnu
          cp "$ffmpeg_dir/ffprobe" ffprobe-x86_64-unknown-linux-gnu

          # Make executable
          chmod +x ffmpeg-x86_64-unknown-linux-gnu
          chmod +x ffprobe-x86_64-unknown-linux-gnu

          # Verify
          ./ffmpeg-x86_64-unknown-linux-gnu -version
          ./ffprobe-x86_64-unknown-linux-gnu -version

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: ./clipforge
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-macos, build-windows, build-linux]

    steps:
      - name: Publish release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
