name: Release ClipForge

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v0.1.0, v1.2.3, etc.
  workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `ClipForge v${process.env.PACKAGE_VERSION}`,
              body: 'Download the appropriate installer for your platform below.\n\n**macOS**: Download the `.dmg` file\n**Windows**: Download the `.msi` or `.exe` file\n**Linux**: Download the `.AppImage` or `.deb` file',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install frontend dependencies
        run: pnpm install

      - name: Download FFmpeg binaries (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          mkdir -p src-tauri/binaries
          # Download FFmpeg for aarch64 (Apple Silicon)
          curl -L https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip -o ffmpeg-arm64.zip
          curl -L https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip -o ffprobe-arm64.zip
          unzip -o ffmpeg-arm64.zip
          unzip -o ffprobe-arm64.zip
          mv ffmpeg src-tauri/binaries/ffmpeg-aarch64-apple-darwin
          mv ffprobe src-tauri/binaries/ffprobe-aarch64-apple-darwin
          chmod +x src-tauri/binaries/ffmpeg-aarch64-apple-darwin
          chmod +x src-tauri/binaries/ffprobe-aarch64-apple-darwin

          # For x86_64, we can use the same binaries (Rosetta 2 will handle it)
          cp src-tauri/binaries/ffmpeg-aarch64-apple-darwin src-tauri/binaries/ffmpeg-x86_64-apple-darwin
          cp src-tauri/binaries/ffprobe-aarch64-apple-darwin src-tauri/binaries/ffprobe-x86_64-apple-darwin

      - name: Download FFmpeg binaries (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path src-tauri/binaries
          # Download FFmpeg for Windows
          Invoke-WebRequest -Uri "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -OutFile "ffmpeg.zip"
          Expand-Archive -Path ffmpeg.zip -DestinationPath .
          $ffmpegDir = Get-ChildItem -Directory -Filter "ffmpeg-*" | Select-Object -First 1
          Copy-Item "$($ffmpegDir.FullName)/bin/ffmpeg.exe" "src-tauri/binaries/ffmpeg-x86_64-pc-windows-msvc.exe"
          Copy-Item "$($ffmpegDir.FullName)/bin/ffprobe.exe" "src-tauri/binaries/ffprobe-x86_64-pc-windows-msvc.exe"

      - name: Download FFmpeg binaries (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          mkdir -p src-tauri/binaries
          # Download static FFmpeg builds for Linux
          wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
          tar -xf ffmpeg-release-amd64-static.tar.xz
          ffmpeg_dir=$(find . -maxdepth 1 -type d -name "ffmpeg-*-amd64-static" | head -n 1)
          cp "$ffmpeg_dir/ffmpeg" src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu
          cp "$ffmpeg_dir/ffprobe" src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu
          chmod +x src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu
          chmod +x src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
