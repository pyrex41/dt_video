# Task ID: 12
# Title: Set up Tauri-Elm Port Bridge for Backend Commands
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: Establish a communication bridge between the Elm frontend and Tauri backend using ports, defining Elm port signatures for all specified backend commands and implementing the JavaScript bridge in main.js to invoke Tauri commands.
# Details:
This task involves setting up bidirectional communication between the Elm application (Task 2) and the Tauri backend (Task 3) via ports. In Elm, define outgoing ports for each backend command: checkFfmpeg : () -> Cmd msg (to check FFmpeg availability), importFile : { path : String } -> Cmd msg (for importing files), trimClip : { input : String, output : String, start : Float, end : Float } -> Cmd msg (to trim video clips), exportVideo : { inputs : List String, output : String, resolution : String } -> Cmd msg (for exporting videos), recordWebcamClip : { output : String, duration : Int } -> Cmd msg (to record webcam clips), and saveRecording : { path : String, data : List Int } -> Cmd msg (to save recordings). Also, define incoming ports to handle responses or errors from the backend, such as onCheckFfmpeg : (Result String Bool) -> msg. In the Elm Main module, integrate these ports into the model and update functions, ensuring commands are triggered via Msg types like CheckFfmpeg, ImportFile, etc. In main.js, use the @tauri-apps/api to create a bridge: import { invoke } from '@tauri-apps/api/tauri'; then define functions like window.elmApp.ports.checkFfmpeg.subscribe(() => { invoke('check_ffmpeg').then(result => window.elmApp.ports.onCheckFfmpeg.send(result)).catch(err => window.elmApp.ports.onCheckFfmpeg.send({ error: err })); }); Repeat similar patterns for each command, mapping Elm port calls to Tauri invoke calls. Ensure error handling and type safety. Consider using Elm's Task for asynchronous operations if needed. This bridge will enable seamless invocation of backend functionality from the Elm UI.

# Test Strategy:
To verify the setup, focus on testing the check_ffmpeg command: In the Elm app, add a test button that triggers the CheckFfmpeg Msg, which calls the checkFfmpeg port. In main.js, ensure the bridge is set up to invoke 'check_ffmpeg' and send the result back via onCheckFfmpeg. Run the app, click the test button, and check the Elm console or UI for the response (e.g., true if FFmpeg is available, or an error). Use Tauri's development tools to monitor invoke calls. For other commands, perform similar port communication tests by triggering them from Elm and verifying backend invocation and response handling, ensuring no JavaScript errors occur and ports are correctly wired.
